@inject IPersonProfilesClient PersonProfilesClient
@inject ISnackbar Snackbar

<EditForm Model="@this" OnValidSubmit="Submit">
    @if (IsEditing)
    {
        <MudTextField Label="Headline" Class="mt-3" @bind-Value="Headline"
                      For="@(() => Headline)" />

        <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                   OnClick="ToggleEditing"></MudIconButton>

        <MudIconButton Color="Color.Primary" ButtonType="ButtonType.Submit"
                   Icon="@Icons.Material.Filled.Save"></MudIconButton>
    }
    else
    {
        @if (!string.IsNullOrEmpty(PersonProfile?.Headline))
        {
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4" Style="color: #9E9E9E; display: inline;">@PersonProfile.Headline</MudText>
        }
        else
        {
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4" Style="color: gray; display: inline;">Add a headline</MudText>
        }

        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="ToggleEditing" />
    }
</EditForm>


@code {
    [Parameter]
    public PersonProfile PersonProfile { get; set; } = null!;

    public bool IsEditing { get; set; } = false;

    public string? Headline { get; set; }

    private void ToggleEditing()
    {
        if (IsEditing)
        {
            IsEditing = false;

            Headline = null;
        }
        else
        {
            IsEditing = true;

            Headline = PersonProfile.Headline;
        }
    }

    private async Task Submit()
    {
        try 
        {
            await PersonProfilesClient.UpdateHeadlineAsync(PersonProfile.Id, Headline);

            PersonProfile.Headline = Headline;

            IsEditing = false;

            Snackbar.Add("Headline updated.", Severity.Success);
        }
        catch(Exception e) 
        {
            Snackbar.Add("Failed to update headline.", Severity.Error);
        }
    }
}
