@page "/profiles/create"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using YourBrand.Portal.Services
@attribute [Authorize]
@inject IPersonProfilesClient PersonProfilesClient
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider

<AppPageTitle>New Profile</AppPageTitle>

<MudText Typo="Typo.h3" Class="mb-4">New Profile</MudText>

<MudPaper Class="pa-4" Elevation="25">
    <EditForm Model="@this" OnValidSubmit="Submit">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="First Name" Variant="Variant.Outlined" Class="mb-4" @bind-Value="FirstName" For="() => FirstName"></MudTextField>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Label="Last Name" Variant="Variant.Outlined" Class="mb-4" @bind-Value="LastName" For="() => LastName"></MudTextField>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Label="Display Name" Variant="Variant.Outlined" Class="mb-4" @bind-Value="DisplayName" For="() => DisplayName"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <IndustrySelector Variant="Variant.Outlined" Class="mb-4" @bind-Value="Industry" For="() => Industry" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <CompetenceAreaSelector Variant="Variant.Outlined" Class="mb-4" @bind-Value="CompetenceArea" For="() => CompetenceArea" />
                </MudItem>
            </MudGrid>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Create</MudButton>
    </EditForm>
</MudPaper>

@code {
    [Required]
    public string FirstName { get; set; } = null!;

    [Required]
    public string LastName { get; set; } = null!;

    public string? DisplayName { get; set; }

    [Required]
    public Industry? Industry { get; set; }

    [Required]
    public CompetenceArea? CompetenceArea { get; set; }

    private async Task Submit()
    {
        var organization = await OrganizationProvider.GetCurrentOrganizationAsync();

        var dto = await PersonProfilesClient.CreatePersonProfileAsync(new CreatePersonProfile {
            FirstName = FirstName,
            LastName = LastName,
            DisplayName = DisplayName,
            Headline = "",
            IndustryId = Industry.Id,
            OrganizationId = organization.Id,
            CompetenceAreaId = CompetenceArea!.Id,
            ShortPresentation = "",
            Presentation = "",
            ManagerId = ""
        });

        NavigationManager.NavigateTo($"/profiles/{dto.Id}");
    }
}